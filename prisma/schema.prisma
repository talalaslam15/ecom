// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  address   String?
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  products    Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  orderItems  OrderItem[]

  @@map("products")
}

model Order {
  id           String      @id @default(cuid())
  total        Float
  status       OrderStatus @default(PENDING)
  customerInfo Json        // Store name, email, phone, address as JSON
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  items        OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float    // Price at time of order
  createdAt DateTime @default(now())
  
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
